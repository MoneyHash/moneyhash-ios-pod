// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name MoneyHash
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Combine
import Foundation
@_exported import MoneyHash
import MoneyHashShared
import PassKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Intent : Swift.Codable {
  public let id: Swift.String?
  public let amount: MoneyHash.AmountData?
  public let secret: Swift.String?
  public let isLive: Swift.Bool?
  public let status: MoneyHash.IntentStatus?
  public let expirationDate: Swift.String?
  public let fees: [MoneyHash.FeeItem]?
  public let totalDiscount: Swift.String?
  public let subtotalAmount: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentPlan : Swift.Codable {
  public var id: Swift.String?
  public var installmentPeriod: Swift.Int?
  public var interestRate: Swift.Double?
  public var amount: MoneyHash.AmountData?
  public var upfrontFees: Swift.Double?
  public var issuerCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentPlanData : Swift.Codable {
  public var id: Swift.String?
  public var issuerCode: Swift.String?
  public init(id: Swift.String? = nil, issuerCode: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MethodsResult : Swift.Codable {
  public let intentData: MoneyHash.IntentDetails?
  public let methods: MoneyHash.IntentMethods?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MHLocale : Swift.String, Swift.Codable {
  case arabic
  case english
  case french
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EmbedButtonViewStyle : Swift.Codable {
  public init(color: Swift.String? = nil, fontFamily: Swift.String? = nil, fontWeight: Swift.String? = nil, fontSize: Swift.String? = nil, fontSmoothing: Swift.String? = nil, lineHeight: Swift.String? = nil, textTransform: Swift.String? = nil, letterSpacing: Swift.String? = nil, background: Swift.String? = nil, padding: Swift.String? = nil, borderRadius: Swift.String? = nil, boxShadow: Swift.String? = nil, borderStyle: Swift.String? = nil, borderColor: Swift.String? = nil, borderWidth: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardFormState : Swift.Codable {
  public let isValid: Swift.Bool
  public let fieldsState: [MoneyHash.CardFieldType : MoneyHash.CardFieldState]
  public init(isValid: Swift.Bool, fieldsState: [MoneyHash.CardFieldType : MoneyHash.CardFieldState])
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApplePayData : Swift.Codable {
  public let countryCode: Swift.String?
  public let merchantId: Swift.String?
  public let currencyCode: Swift.String?
  public let supportedRegions: [Swift.String]?
  public let amount: Swift.Float?
  public let supportedNetworks: [Swift.String]?
  public let methodID: Swift.String?
  public let merchantCapabilities: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class CardFormBuilder {
  public init()
  public func setConfiguration(_ configuration: MoneyHash.CardFormConfiguration) -> MoneyHash.CardFormBuilder
  public func setCardNumberField(handler: ((MoneyHash.CardInputFieldState) -> Swift.Void)? = nil) -> MoneyHash.CardFormBuilder
  public func setCVVField(handler: ((MoneyHash.CardInputFieldState) -> Swift.Void)? = nil) -> MoneyHash.CardFormBuilder
  public func setCardHolderNameField(handler: ((MoneyHash.CardInputFieldState) -> Swift.Void)? = nil) -> MoneyHash.CardFormBuilder
  public func setExpireMonthField(handler: ((MoneyHash.CardInputFieldState) -> Swift.Void)? = nil) -> MoneyHash.CardFormBuilder
  public func setExpireYearField(handler: ((MoneyHash.CardInputFieldState) -> Swift.Void)? = nil) -> MoneyHash.CardFormBuilder
  public func setCardBrandChangeHandler(_ handler: @escaping (MoneyHash.CardBrand) -> Swift.Void) -> MoneyHash.CardFormBuilder
  public func build() -> MoneyHash.CardForm
  @objc deinit
}
public enum DiscountType : Swift.String, Swift.Codable {
  case amount
  case percentage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct DiscountItem : Swift.Codable {
  public let title: [MoneyHash.Language : Swift.String]?
  public let type: MoneyHash.DiscountType?
  public let value: Swift.String?
  public init(title: [MoneyHash.Language : Swift.String]?, type: MoneyHash.DiscountType?, value: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DiscountData : Swift.Codable {
  public let amount: Swift.String?
  public let discount: MoneyHash.DiscountItem?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardBrand : Swift.Codable {
  public let first6Digits: Swift.String
  public let brand: MoneyHash.Brand
  public let brandIconUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Brand : Swift.String, Swift.Codable {
  case visa
  case mastercard
  case mada
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct IntentMethodMetaData {
  public let cvv: Swift.String?
  public init(cvv: Swift.String?)
}
public class MoneyHashSDKBuilder {
  public init()
  @discardableResult
  public func setPublicKey(_ key: Swift.String) -> MoneyHash.MoneyHashSDKBuilder
  @discardableResult
  public func setApplePayConfiguration(_ applePayConfiguration: MoneyHash.ApplePayConfiguration) -> MoneyHash.MoneyHashSDKBuilder
  public func build() -> any MoneyHash.MoneyHashSDK
  @objc deinit
}
public enum IntentStateDetails : Swift.Codable {
  case methodSelection(methods: MoneyHash.IntentMethods?)
  case intentForm
  case intentProcessed
  case transactionWaitingUserAction
  case transactionFailed(recommendedMethods: MoneyHash.IntentMethods?)
  case expired
  case closed
  case formFields(tokenizeCardInfo: MoneyHash.TokenizeCardInfo?, billingFields: [MoneyHash.InputField]?, shippingFields: [MoneyHash.InputField]?)
  case redirectToURL(url: Swift.String?, renderStrategy: MoneyHash.RenderStrategy?)
  case savedCardCVV(cvvField: MoneyHash.InputField, cardTokenData: MoneyHash.CardTokenData?)
  case cardIntentSuccess
  case cardIntentFailed
  case nativePay(nativePayData: MoneyHash.NativePayData?)
  case installmentPlans(plans: [MoneyHash.InstallmentPlan]?)
  case processing
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardTokenData : Swift.Codable {
  public let bin: Swift.String?
  public let brand: Swift.String?
  public let cardHolderName: Swift.String?
  public let country: Swift.String?
  public let expiryMonth: Swift.String?
  public let expiryYear: Swift.String?
  public let issuer: Swift.String?
  public let last4: Swift.String?
  public let logo: Swift.String?
  public let paymentMethods: [Swift.String]?
  public let requiresCvv: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InputField : Swift.Codable {
  public let type: MoneyHash.InputFieldType
  public let name: Swift.String?
  public var value: Swift.String?
  public let optionsList: [MoneyHash.OptionItem]?
  public let optionsMap: [Swift.String : [MoneyHash.OptionItem]]?
  public let label: Swift.String?
  public let maxLength: Swift.Int?
  public let hint: Swift.String?
  public let isRequired: Swift.Bool
  public let minLength: Swift.Int?
  public let readOnly: Swift.Bool
  public let dependsOn: Swift.String?
  public init(type: MoneyHash.InputFieldType, name: Swift.String?, value: Swift.String? = nil, optionsList: [MoneyHash.OptionItem]?, optionsMap: [Swift.String : [MoneyHash.OptionItem]]?, label: Swift.String?, maxLength: Swift.Int?, hint: Swift.String?, isRequired: Swift.Bool, minLength: Swift.Int?, readOnly: Swift.Bool, dependsOn: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OptionItem : Swift.Codable {
  public let label: Swift.String
  public let value: Swift.String
  public init(label: Swift.String, value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InputFieldType : Swift.String, Swift.Codable {
  case text
  case email
  case phoneNumber
  case select
  case number
  case date
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Balances : Swift.Codable, Swift.Sendable {
  public let availableToCapture: Swift.String?
  public let availableToRefund: Swift.String?
  public let availableToVoid: Swift.String?
  public let totalAuthorized: Swift.String?
  public let totalCaptured: Swift.String?
  public let totalRefunded: Swift.String?
  public let totalVoided: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IntentDetails : Swift.Codable {
  public let selectedMethod: Swift.String?
  public let wallet: Swift.Double?
  public let intent: MoneyHash.Intent?
  public let productItems: [MoneyHash.ProductItem]?
  public let state: MoneyHash.IntentStateDetails?
  public let transaction: MoneyHash.Transaction?
  public let id: Swift.String?
  public let lastUsedMethod: MoneyHash.LastUsedMethod?
  public let paymentStatus: MoneyHash.PaymentStatus?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol MoneyHashSDK {
  func renderForm(on viewController: UIKit.UIViewController, intentId: Swift.String, embedStyle: MoneyHash.EmbedStyle?, intentType: MoneyHash.IntentType, completionHandler: @escaping (Swift.Result<MoneyHash.IntentDetails, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor func renderURL(on viewController: UIKit.UIViewController, urlToRender: Foundation.URL, intentId: Swift.String, embedStyle: MoneyHash.EmbedStyle?, intentType: MoneyHash.IntentType, completionHandler: @escaping (Swift.Result<MoneyHash.IntentDetails, any Swift.Error>) -> Swift.Void)
  func getMethods(currency: Swift.String, amount: Swift.Double?, customer: Swift.String?, flowId: Swift.String?, operation: MoneyHash.IntentOperation?, customFields: [Swift.String : MoneyHash.CustomFieldValue]?) async throws -> MoneyHash.IntentMethods
  func getMethods(intentId: Swift.String, intentType: MoneyHash.IntentType) async throws -> MoneyHash.IntentMethods
  func getIntentDetails(intentId: Swift.String, intentType: MoneyHash.IntentType) async throws -> MoneyHash.IntentDetails
  func deleteSavedCard(cardTokenId: Swift.String, intentSecret: Swift.String) async throws
  func resetSelectedMethod(intentId: Swift.String, intentType: MoneyHash.IntentType) async throws -> MoneyHash.MethodsResult
  func proceedWithMethod(intentId: Swift.String, intentType: MoneyHash.IntentType, selectedMethodId: Swift.String, methodType: MoneyHash.IntentMethodType, metaData: MoneyHash.IntentMethodMetaData?, useWalletBalance: Swift.Bool?, installmentPlanData: MoneyHash.InstallmentPlanData?) async throws -> MoneyHash.MethodsResult
  func submitForm(intentID: Swift.String, selectedMethod: Swift.String, billingData: [Swift.String : Swift.String]?, shippingData: [Swift.String : Swift.String]?, vaultData: MoneyHash.VaultData?, saveCard: Swift.Bool?, installmentPlanData: MoneyHash.InstallmentPlanData?) async throws -> MoneyHash.IntentDetails
  func submitCardCVV(intentID: Swift.String, cvv: Swift.String, installmentPlanData: MoneyHash.InstallmentPlanData?) async throws -> MoneyHash.IntentDetails
  func setLogLevel(logLevel: MoneyHash.LogLevel)
  func submitPaymentReceipt(intentId: Swift.String, nativePayReceipt: MoneyHash.NativePayReceipt) async throws -> MoneyHash.IntentDetails
  @_Concurrency.MainActor func generateApplePayReceipt(depositAmount: Swift.Float, applePayData: MoneyHash.ApplePayData) async throws -> MoneyHash.NativePayReceipt
  @_Concurrency.MainActor func generateApplePayReceipt(depositAmount: Swift.Float, merchantIdentifier: Swift.String, currencyCode: Swift.String, countryCode: Swift.String, supportedNetworks: [Swift.String]?, merchantCapabilities: [Swift.String]?) async throws -> MoneyHash.NativePayReceipt
  func isDeviceCompatible() -> Swift.Bool
  func updateField(fieldType: MoneyHash.CardFieldType, currentValue: Swift.String) -> MoneyHash.CardFieldState
  func isValidForm() -> MoneyHash.CardFormState
  func collect(token: Swift.String?) async throws -> MoneyHash.VaultData?
  func pay(intentId: Swift.String, cardData: MoneyHash.VaultData, saveCard: Swift.Bool, billingData: [Swift.String : Swift.String]?, shippingData: [Swift.String : Swift.String]?, installmentPlanData: MoneyHash.InstallmentPlanData?) async throws -> MoneyHash.IntentDetails
  func createCardToken(cardIntentId: Swift.String, cardData: MoneyHash.VaultData) async throws -> MoneyHash.IntentStateDetails?
  func setCrossplatformVersion(_ version: Swift.String)
  func setCardFormConfiguration(_ configuration: MoneyHash.CardFormConfiguration)
  func setApplePayConfiguration(_ applePayConfiguration: MoneyHash.ApplePayConfiguration)
  func binLookup() async throws -> MoneyHash.LookupData
  func binLookup(cardData: MoneyHash.VaultData) async throws -> MoneyHash.LookupData
  func setLocale(_ locale: MoneyHash.MHLocale)
  func updateFees(intentId: Swift.String, fees: [MoneyHash.FeeItem]) async throws -> MoneyHash.FeesData?
  func updateDiscount(intentId: Swift.String, discount: MoneyHash.DiscountItem) async throws -> MoneyHash.DiscountData?
  func setPublicKey(_ key: Swift.String)
  func selectInstallmentPlan(intentId: Swift.String, installmentPlanData: MoneyHash.InstallmentPlanData) async throws -> MoneyHash.IntentDetails
  func getInstallmentPlans(amount: Swift.Double, currency: Swift.String, first6Digits: Swift.String?) async throws -> [MoneyHash.InstallmentPlan]
  func getApplePayBinLookup(receipt: MoneyHash.NativePayReceipt, methodID: Swift.String, flowId: Swift.String?) async throws -> MoneyHash.LookupData
}
public class CardFormConfiguration : Swift.Codable {
  final public let isCardHolderNameRequired: Swift.Bool
  final public let enableCardNumberValidation: Swift.Bool
  public init(isCardHolderNameRequired: Swift.Bool = false, enableCardNumberValidation: Swift.Bool = true)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct EmbedLoaderStyle : Swift.Codable {
  public init(backgroundColor: Swift.String? = nil, color: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CardForm {
  public func collect() async throws -> MoneyHash.VaultData?
  public func pay(intentId: Swift.String, cardData: MoneyHash.VaultData, saveCard: Swift.Bool, billingData: [Swift.String : Swift.String]?, shippingData: [Swift.String : Swift.String]?, installmentPlanData: MoneyHash.InstallmentPlanData?) async throws -> MoneyHash.IntentDetails
  public func createCardToken(cardIntentId: Swift.String, cardData: MoneyHash.VaultData) async throws -> MoneyHash.IntentStateDetails?
  public func binLookup(cardData: MoneyHash.VaultData) async throws -> MoneyHash.LookupData?
  public func binLookup() async throws -> MoneyHash.LookupData?
  public var isValid: Swift.Bool {
    get
  }
  @objc deinit
}
public struct MHError : Swift.Error, Swift.Codable {
  public let type: MoneyHash.ErrorType
  public let message: Swift.String
  public let errors: [MoneyHash.ErrorInfo]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorType : Swift.String, Swift.Codable {
  case cancelled
  case cardValidation
  case network
  case unknown
  case notCompatibleWithApplePay
  case applePayTransactionFailed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ErrorInfo : Swift.Codable {
  public let key: Swift.String
  public let message: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Language : Swift.String, Swift.Codable, Swift.CodingKey {
  case arabic
  case english
  case french
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum IntentType : Swift.String, Swift.Codable {
  case payment
  case payout
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EmbedInputViewStyle : Swift.Codable {
  public init(height: Swift.String? = nil, padding: Swift.String? = nil, background: Swift.String? = nil, borderRadius: Swift.String? = nil, boxShadow: Swift.String? = nil, borderStyle: Swift.String? = nil, borderColor: Swift.String? = nil, borderWidth: Swift.String? = nil, color: Swift.String? = nil, fontFamily: Swift.String? = nil, fontWeight: Swift.String? = nil, fontSize: Swift.String? = nil, fontSmoothing: Swift.String? = nil, lineHeight: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VaultData : Swift.Codable {
  public let firstSixDigits: Swift.String?
  public let lastFourDigits: Swift.String?
  public let cardScheme: Swift.String?
  public let cardHolderName: Swift.String?
  public let expiryYear: Swift.String?
  public let expiryMonth: Swift.String?
  public let isLive: Swift.Bool?
  public let accessToken: Swift.String?
  public let cardToken: Swift.String?
  public let cvv: Swift.String?
  public let saveCard: Swift.Bool?
  public let fingerprint: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum IntentMethodType : Swift.String, Swift.Codable {
  case paymentMethod
  case expressMethod
  case payoutMethod
  case savedCard
  case customerBalance
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ProductItem : Swift.Codable {
  public let name: Swift.String?
  public let type: Swift.String?
  public let amount: Swift.String?
  public let category: Swift.String?
  public let quantity: Swift.Int?
  public let description: Swift.String?
  public let subcategory: Swift.String?
  public let referenceId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PayoutMethod : MoneyHash.MoneyHashMethod, Swift.Codable {
  public let id: Swift.String?
  public let title: Swift.String?
  public let isSelected: Swift.Bool?
  public let checkoutIcons: [Swift.String]?
  public let type: MoneyHash.IntentMethodType?
  public let confirmationRequired: Swift.Bool?
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeeItem : Swift.Codable {
  public let title: [MoneyHash.Language : Swift.String]?
  public let value: Swift.String?
  public let discount: MoneyHash.DiscountItem?
  public init(title: [MoneyHash.Language : Swift.String]?, value: Swift.String?, discount: MoneyHash.DiscountItem?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct FeesData : Swift.Codable {
  public let amount: Swift.String?
  public let fees: [MoneyHash.FeeItem]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Encodable {
  public func convertToJSONString() throws -> Swift.String
  public func convertToDictionary() throws -> [Swift.String : Any]
}
public protocol MoneyHashMethod : Swift.Identifiable {
  var id: Swift.String? { get }
  var title: Swift.String? { get }
  var isSelected: Swift.Bool? { get }
  var checkoutIcons: [Swift.String]? { get }
  var type: MoneyHash.IntentMethodType? { get }
}
public struct IntentMethods : Swift.Codable {
  public let customerBalances: [MoneyHash.CustomerBalance]?
  public let paymentMethods: [MoneyHash.PaymentMethod]?
  public let expressMethods: [MoneyHash.ExpressMethod]?
  public let savedCards: [MoneyHash.SavedCard]?
  public let payoutMethods: [MoneyHash.PayoutMethod]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Error {
  public func toJsonString() throws -> Swift.String
}
public struct ExpressMethod : MoneyHash.MoneyHashMethod, Swift.Codable {
  public let id: Swift.String?
  public let title: Swift.String?
  public let isSelected: Swift.Bool?
  public let checkoutIcons: [Swift.String]?
  public let type: MoneyHash.IntentMethodType?
  public let confirmationRequired: Swift.Bool?
  public let requiredBillingFields: [MoneyHash.InputField]?
  public let requiredShippingFields: [MoneyHash.InputField]?
  public let nativePayData: MoneyHash.NativePayData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public typealias ID = Swift.String?
}
public enum IntentOperation : Swift.String, Swift.Codable {
  case purchase
  case authorize
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PaymentMethod : MoneyHash.MoneyHashMethod, Swift.Codable {
  public let id: Swift.String?
  public let title: Swift.String?
  public let isSelected: Swift.Bool?
  public let checkoutIcons: [Swift.String]?
  public let type: MoneyHash.IntentMethodType?
  public let confirmationRequired: Swift.Bool?
  public let requiredBillingFields: [MoneyHash.InputField]?
  public let requiredShippingFields: [MoneyHash.InputField]?
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentStatus : Swift.Codable, Swift.Sendable {
  public let balances: MoneyHash.Balances?
  public let status: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EmbedButtonStyle : Swift.Codable {
  public init(base: MoneyHash.EmbedButtonViewStyle? = nil, hover: MoneyHash.EmbedButtonViewStyle? = nil, focus: MoneyHash.EmbedButtonViewStyle? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SavedCard : Swift.Codable {
  public let id: Swift.String?
  public let brand: Swift.String?
  public let last4: Swift.String?
  public let expiryMonth: Swift.String?
  public let expiryYear: Swift.String?
  public let country: Swift.String?
  public let logo: Swift.String?
  public let requireCvv: Swift.Bool?
  public let cvvConfig: MoneyHash.CvvConfig?
  public let type: MoneyHash.IntentMethodType?
  public let first6Digits: Swift.String?
  public init(id: Swift.String?, brand: Swift.String?, last4: Swift.String?, expiryMonth: Swift.String?, expiryYear: Swift.String?, country: Swift.String?, logo: Swift.String?, requireCvv: Swift.Bool?, cvvConfig: MoneyHash.CvvConfig?, type: MoneyHash.IntentMethodType?, first6Digits: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CvvConfig : Swift.Codable {
  public let digitsCount: Swift.Int?
  public init(digitsCount: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EmbedStyle : Swift.Codable {
  public init(submitButton: MoneyHash.EmbedButtonStyle? = nil, loader: MoneyHash.EmbedLoaderStyle? = nil, input: MoneyHash.EmbedInputStyle? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CardFieldType : Swift.String, Swift.CodingKey, Swift.Codable {
  case cardNumber
  case cvv
  case cardHolderName
  case expireMonth
  case expireYear
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public protocol MHStatus {
  static var cancelled: Self { get }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MHViewController<T> : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public enum LogLevel {
  case verbose
  case debug
  case info
  case warning
  case error
  case assert
  public static func == (a: MoneyHash.LogLevel, b: MoneyHash.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CustomFieldValue : Swift.Codable {
  case boolean(value: Swift.Bool)
  case float(value: Swift.Float)
  case double(value: Swift.Double)
  case string(value: Swift.String)
  case int(value: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardInputFieldState {
  public let isValid: Swift.Bool?
  public let errorMessage: Swift.String?
  public let isOnFocused: Swift.Bool
  public let inputLength: Swift.Int
  public init(isValid: Swift.Bool? = nil, errorMessage: Swift.String? = nil, isOnFocused: Swift.Bool = false, inputLength: Swift.Int)
  public static let defaultState: MoneyHash.CardInputFieldState
}
public struct CustomerBalance : Swift.Codable {
  public let id: Swift.String?
  public let balance: Swift.Double?
  public let isSelected: Swift.Bool?
  public let icon: Swift.String?
  public let type: MoneyHash.IntentMethodType?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EmbedInputStyle : Swift.Codable {
  public init(base: MoneyHash.EmbedInputViewStyle? = nil, error: MoneyHash.EmbedInputViewStyle? = nil, focus: MoneyHash.EmbedInputViewStyle? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CollectibleBillingData : Swift.String, Swift.Codable {
  case email
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Transaction : Swift.Codable {
  public let id: Swift.String?
  public let createdDate: Swift.String?
  public let status: Swift.String?
  public let amount: Swift.Double?
  public let amountCurrency: Swift.String?
  public let method: Swift.String?
  public let methodName: Swift.String?
  public let billingData: Swift.String?
  public let customFields: Swift.String?
  public let customFormAnswers: Swift.String?
  public let externalActionMessage: [Swift.String]?
  public let providerTransactionFields: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum IntentStatus : Swift.String, Swift.Codable {
  case processed
  case unprocessed
  case timeExpired
  case closed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TokenizeCardInfo : Swift.Codable {
  public let accessToken: Swift.String?
  public let isLive: Swift.Bool?
  public let saveCard: Swift.Bool?
  public let saveCardCheckboxMandatory: MoneyHash.SaveCardCheckbox?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SaveCardCheckbox : Swift.Codable {
  public let mandatory: Swift.Bool?
  public let show: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NativePayReceipt : Swift.Codable {
  public let receipt: Swift.String
  public let receiptBillingData: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LookupData : Swift.Codable, Swift.Sendable {
  public let brand: Swift.String?
  public let cardType: Swift.String?
  public let firstSixDigits: Swift.String?
  public let issuer: Swift.String?
  public let issuerCountry: Swift.String?
  public let issuerCountryCode: Swift.String?
  public let product: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayConfiguration : Swift.Codable {
  public let collectibleBillingData: [MoneyHash.CollectibleBillingData]?
  public let merchantDisplayName: Swift.String
  public init(collectibleBillingData: [MoneyHash.CollectibleBillingData]?, merchantDisplayName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RenderStrategy : Swift.String, Swift.Codable {
  case redirect
  case popupIFrame
  case iframe
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CardFieldState : Swift.Codable {
  public let isValid: Swift.Bool
  public let errorMessage: Swift.String?
  public let formattedValue: Swift.String
  public let fieldType: MoneyHash.CardFieldType
  public let cardBrand: MoneyHash.CardBrand?
  public let length: Swift.Int?
  public init(isValid: Swift.Bool, errorMessage: Swift.String?, formattedValue: Swift.String, fieldType: MoneyHash.CardFieldType, cardBrand: MoneyHash.CardBrand?, length: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct SecureTextField<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(cardFormCollector: MoneyHash.CardForm, type: MoneyHash.CardFieldType, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9MoneyHash15SecureTextFieldV4bodyQrvp", 0) __<Content>
}
public enum NativePayData : Swift.Codable {
  case applePay(MoneyHash.ApplePayData)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LastUsedMethod : Swift.Codable {
  public let type: MoneyHash.LastUsedMethodType?
  public let id: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LastUsedMethodType : Swift.String, Swift.Codable {
  case customerBalance
  case savedCard
  case paymentMethod
  public var displayValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AmountData : Swift.Codable {
  public let value: Swift.String?
  public let formatted: Swift.Double?
  public let currency: Swift.String?
  public let maxPayoutAmount: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoneyHash.MHLocale : Swift.Equatable {}
extension MoneyHash.MHLocale : Swift.Hashable {}
extension MoneyHash.MHLocale : Swift.RawRepresentable {}
extension MoneyHash.DiscountType : Swift.Equatable {}
extension MoneyHash.DiscountType : Swift.Hashable {}
extension MoneyHash.DiscountType : Swift.RawRepresentable {}
extension MoneyHash.Brand : Swift.Equatable {}
extension MoneyHash.Brand : Swift.Hashable {}
extension MoneyHash.Brand : Swift.RawRepresentable {}
extension MoneyHash.InputFieldType : Swift.Equatable {}
extension MoneyHash.InputFieldType : Swift.Hashable {}
extension MoneyHash.InputFieldType : Swift.RawRepresentable {}
extension MoneyHash.ErrorType : Swift.Equatable {}
extension MoneyHash.ErrorType : Swift.Hashable {}
extension MoneyHash.ErrorType : Swift.RawRepresentable {}
extension MoneyHash.Language : Swift.Equatable {}
extension MoneyHash.Language : Swift.Hashable {}
extension MoneyHash.Language : Swift.RawRepresentable {}
extension MoneyHash.IntentType : Swift.Equatable {}
extension MoneyHash.IntentType : Swift.Hashable {}
extension MoneyHash.IntentType : Swift.RawRepresentable {}
extension MoneyHash.IntentMethodType : Swift.Equatable {}
extension MoneyHash.IntentMethodType : Swift.Hashable {}
extension MoneyHash.IntentMethodType : Swift.RawRepresentable {}
extension MoneyHash.IntentOperation : Swift.Equatable {}
extension MoneyHash.IntentOperation : Swift.Hashable {}
extension MoneyHash.IntentOperation : Swift.RawRepresentable {}
extension MoneyHash.CardFieldType : Swift.Equatable {}
extension MoneyHash.CardFieldType : Swift.Hashable {}
extension MoneyHash.CardFieldType : Swift.RawRepresentable {}
extension MoneyHash.LogLevel : Swift.Equatable {}
extension MoneyHash.LogLevel : Swift.Hashable {}
extension MoneyHash.CollectibleBillingData : Swift.Equatable {}
extension MoneyHash.CollectibleBillingData : Swift.Hashable {}
extension MoneyHash.CollectibleBillingData : Swift.RawRepresentable {}
extension MoneyHash.IntentStatus : Swift.Equatable {}
extension MoneyHash.IntentStatus : Swift.Hashable {}
extension MoneyHash.IntentStatus : Swift.RawRepresentable {}
extension MoneyHash.RenderStrategy : Swift.Equatable {}
extension MoneyHash.RenderStrategy : Swift.Hashable {}
extension MoneyHash.RenderStrategy : Swift.RawRepresentable {}
@available(iOS 15.0, *)
extension MoneyHash.SecureTextField : Swift.Sendable {}
extension MoneyHash.LastUsedMethodType : Swift.Equatable {}
extension MoneyHash.LastUsedMethodType : Swift.Hashable {}
extension MoneyHash.LastUsedMethodType : Swift.RawRepresentable {}
